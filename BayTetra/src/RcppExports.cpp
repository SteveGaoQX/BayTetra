// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvn_rcpp
double dmvn_rcpp(const arma::rowvec& x, const arma::rowvec& mean, const arma::mat& sigma, bool logd);
RcppExport SEXP _BayTetra_dmvn_rcpp(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvn_rcpp(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// Generate_t_cpp
arma::cube Generate_t_cpp(int I, int Q, int J_max, double min_dist, double lower, double upper, const arma::cube data_index);
RcppExport SEXP _BayTetra_Generate_t_cpp(SEXP ISEXP, SEXP QSEXP, SEXP J_maxSEXP, SEXP min_distSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP data_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type J_max(J_maxSEXP);
    Rcpp::traits::input_parameter< double >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type data_index(data_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(Generate_t_cpp(I, Q, J_max, min_dist, lower, upper, data_index));
    return rcpp_result_gen;
END_RCPP
}
// rmvn_rcpp
arma::mat rmvn_rcpp(const int n, const arma::vec& mean, const arma::mat& sigma);
RcppExport SEXP _BayTetra_rmvn_rcpp(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvn_rcpp(n, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rinvgamma_rcpp
double rinvgamma_rcpp(double a, double b);
RcppExport SEXP _BayTetra_rinvgamma_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgamma_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// dinv_gamma_rcpp
double dinv_gamma_rcpp(double x, double alpha, double beta, bool logd);
RcppExport SEXP _BayTetra_dinv_gamma_rcpp(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dinv_gamma_rcpp(x, alpha, beta, logd));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha_cpp
arma::mat update_alpha_cpp(const arma::cube& beta, const arma::mat& beta_kq0, const arma::mat& omega, const arma::cube& theta_iq, const arma::vec& sigma2, const arma::cube& y, const arma::cube& data_index, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp, const arma::cube& Z_sum, const arma::mat& V_alpha_inv, const arma::vec& V_alpha_inv_mu_alpha);
RcppExport SEXP _BayTetra_update_alpha_cpp(SEXP betaSEXP, SEXP beta_kq0SEXP, SEXP omegaSEXP, SEXP theta_iqSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP, SEXP Z_sumSEXP, SEXP V_alpha_invSEXP, SEXP V_alpha_inv_mu_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_sum(Z_sumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V_alpha_inv(V_alpha_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type V_alpha_inv_mu_alpha(V_alpha_inv_mu_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_cpp(beta, beta_kq0, omega, theta_iq, sigma2, y, data_index, B, Z, g_cpp, Z_sum, V_alpha_inv, V_alpha_inv_mu_alpha));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_kq0_cpp
arma::mat update_beta_kq0_cpp(const arma::mat& alpha, const arma::cube& beta, const arma::mat& omega, const arma::cube& theta_iq, const arma::vec& sigma2, const arma::mat& nu_kq0, const arma::cube& y, const arma::cube& data_index, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp);
RcppExport SEXP _BayTetra_update_beta_kq0_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP omegaSEXP, SEXP theta_iqSEXP, SEXP sigma2SEXP, SEXP nu_kq0SEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type nu_kq0(nu_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_kq0_cpp(alpha, beta, omega, theta_iq, sigma2, nu_kq0, y, data_index, B, Z, g_cpp));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_kq_cpp
arma::cube update_beta_kq_cpp(const arma::mat& alpha, const arma::cube& beta, const arma::mat& beta_kq0, const arma::mat& omega, const arma::cube& theta_iq, const arma::vec& sigma2, const arma::cube& y, const arma::cube& data_index, const arma::mat& K_mat, const arma::mat& tau_kq2, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp);
RcppExport SEXP _BayTetra_update_beta_kq_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP beta_kq0SEXP, SEXP omegaSEXP, SEXP theta_iqSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP K_matSEXP, SEXP tau_kq2SEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type K_mat(K_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau_kq2(tau_kq2SEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_kq_cpp(alpha, beta, beta_kq0, omega, theta_iq, sigma2, y, data_index, K_mat, tau_kq2, B, Z, g_cpp));
    return rcpp_result_gen;
END_RCPP
}
// logpost_omega_cpp
double logpost_omega_cpp(int i, const arma::rowvec& omega_i, const arma::mat& alpha, const arma::cube& beta, const arma::mat& beta_kq0, const arma::cube& theta_iq, const arma::vec& sigma2, const arma::mat& Sigma_omega, const arma::cube& y, const arma::cube& data_index, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp, int K, int Q, int J_max);
RcppExport SEXP _BayTetra_logpost_omega_cpp(SEXP iSEXP, SEXP omega_iSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP beta_kq0SEXP, SEXP theta_iqSEXP, SEXP sigma2SEXP, SEXP Sigma_omegaSEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP, SEXP KSEXP, SEXP QSEXP, SEXP J_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type omega_i(omega_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_omega(Sigma_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type J_max(J_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(logpost_omega_cpp(i, omega_i, alpha, beta, beta_kq0, theta_iq, sigma2, Sigma_omega, y, data_index, B, Z, g_cpp, K, Q, J_max));
    return rcpp_result_gen;
END_RCPP
}
// update_omega_cpp
arma::mat update_omega_cpp(const arma::mat& alpha, const arma::cube& beta, const arma::mat& beta_kq0, const arma::mat& omega, const arma::cube& theta_iq, const arma::vec& sigma2, const arma::mat& Sigma_omega, const arma::cube& y, const arma::cube& data_index, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp, const double omega_var_update);
RcppExport SEXP _BayTetra_update_omega_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP beta_kq0SEXP, SEXP omegaSEXP, SEXP theta_iqSEXP, SEXP sigma2SEXP, SEXP Sigma_omegaSEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP, SEXP omega_var_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_omega(Sigma_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< const double >::type omega_var_update(omega_var_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(update_omega_cpp(alpha, beta, beta_kq0, omega, theta_iq, sigma2, Sigma_omega, y, data_index, B, Z, g_cpp, omega_var_update));
    return rcpp_result_gen;
END_RCPP
}
// logpost_Sigma_omega_cpp
double logpost_Sigma_omega_cpp(const arma::mat& Sigma_omega, const arma::mat& omega);
RcppExport SEXP _BayTetra_logpost_Sigma_omega_cpp(SEXP Sigma_omegaSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_omega(Sigma_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(logpost_Sigma_omega_cpp(Sigma_omega, omega));
    return rcpp_result_gen;
END_RCPP
}
// update_Sigma_omega_cpp
arma::mat update_Sigma_omega_cpp(const arma::mat& omega, const arma::mat& Sigma_omega, const double Sigma_omega_step);
RcppExport SEXP _BayTetra_update_Sigma_omega_cpp(SEXP omegaSEXP, SEXP Sigma_omegaSEXP, SEXP Sigma_omega_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_omega(Sigma_omegaSEXP);
    Rcpp::traits::input_parameter< const double >::type Sigma_omega_step(Sigma_omega_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Sigma_omega_cpp(omega, Sigma_omega, Sigma_omega_step));
    return rcpp_result_gen;
END_RCPP
}
// update_theta_iq_cpp
arma::cube update_theta_iq_cpp(const arma::mat& alpha, const arma::cube& beta, const arma::mat& beta_kq0, const arma::mat& omega, const arma::vec& sigma2, const arma::cube& y, const arma::cube& data_index, const arma::cube& t_std, const arma::cube& t_org, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp, const arma::vec& tau_q_vec, const arma::vec& lambda_q_vec);
RcppExport SEXP _BayTetra_update_theta_iq_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP beta_kq0SEXP, SEXP omegaSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP t_stdSEXP, SEXP t_orgSEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP, SEXP tau_q_vecSEXP, SEXP lambda_q_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type t_std(t_stdSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type t_org(t_orgSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_q_vec(tau_q_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_q_vec(lambda_q_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(update_theta_iq_cpp(alpha, beta, beta_kq0, omega, sigma2, y, data_index, t_std, t_org, B, Z, g_cpp, tau_q_vec, lambda_q_vec));
    return rcpp_result_gen;
END_RCPP
}
// update_tau_q_cpp
arma::vec update_tau_q_cpp(const arma::cube& theta_iq, double a_tau, double b_tau, const arma::cube& data_index, const arma::cube& t, const arma::vec& lambda_q_vec);
RcppExport SEXP _BayTetra_update_tau_q_cpp(SEXP theta_iqSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP data_indexSEXP, SEXP tSEXP, SEXP lambda_q_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_q_vec(lambda_q_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(update_tau_q_cpp(theta_iq, a_tau, b_tau, data_index, t, lambda_q_vec));
    return rcpp_result_gen;
END_RCPP
}
// logpost_lambda_normpart_cpp
double logpost_lambda_normpart_cpp(double q, const arma::cube& theta_iq, double lambda_q, double tau_q, const arma::cube& data_index, const arma::cube& t);
RcppExport SEXP _BayTetra_logpost_lambda_normpart_cpp(SEXP qSEXP, SEXP theta_iqSEXP, SEXP lambda_qSEXP, SEXP tau_qSEXP, SEXP data_indexSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_q(lambda_qSEXP);
    Rcpp::traits::input_parameter< double >::type tau_q(tau_qSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(logpost_lambda_normpart_cpp(q, theta_iq, lambda_q, tau_q, data_index, t));
    return rcpp_result_gen;
END_RCPP
}
// update_lambda_q_cpp
arma::vec update_lambda_q_cpp(const arma::vec& lambda, double a_lam, double b_lam, const arma::cube& theta_iq, const arma::vec& tau_q_vec, const arma::cube& data_index, const arma::cube& t, const double lambda_step);
RcppExport SEXP _BayTetra_update_lambda_q_cpp(SEXP lambdaSEXP, SEXP a_lamSEXP, SEXP b_lamSEXP, SEXP theta_iqSEXP, SEXP tau_q_vecSEXP, SEXP data_indexSEXP, SEXP tSEXP, SEXP lambda_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a_lam(a_lamSEXP);
    Rcpp::traits::input_parameter< double >::type b_lam(b_lamSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_q_vec(tau_q_vecSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_step(lambda_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(update_lambda_q_cpp(lambda, a_lam, b_lam, theta_iq, tau_q_vec, data_index, t, lambda_step));
    return rcpp_result_gen;
END_RCPP
}
// update_lambda_q_cpp_wth_accept
Rcpp::List update_lambda_q_cpp_wth_accept(const arma::vec& lambda, double a_lam, double b_lam, const arma::cube& theta_iq, const arma::vec& tau_q_vec, const arma::cube& data_index, const arma::cube& t, const double lambda_step);
RcppExport SEXP _BayTetra_update_lambda_q_cpp_wth_accept(SEXP lambdaSEXP, SEXP a_lamSEXP, SEXP b_lamSEXP, SEXP theta_iqSEXP, SEXP tau_q_vecSEXP, SEXP data_indexSEXP, SEXP tSEXP, SEXP lambda_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a_lam(a_lamSEXP);
    Rcpp::traits::input_parameter< double >::type b_lam(b_lamSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_q_vec(tau_q_vecSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_step(lambda_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(update_lambda_q_cpp_wth_accept(lambda, a_lam, b_lam, theta_iq, tau_q_vec, data_index, t, lambda_step));
    return rcpp_result_gen;
END_RCPP
}
// update_sigma2_cpp
arma::vec update_sigma2_cpp(arma::mat& alpha, const arma::cube& beta, const arma::mat& beta_kq0, arma::mat& omega, const arma::cube& theta_iq, const arma::cube& y, const arma::cube& data_index, const arma::field<arma::cube>& B, const arma::field<arma::cube>& Z, const arma::vec& g_cpp, double h_1, double h_2);
RcppExport SEXP _BayTetra_update_sigma2_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP beta_kq0SEXP, SEXP omegaSEXP, SEXP theta_iqSEXP, SEXP ySEXP, SEXP data_indexSEXP, SEXP BSEXP, SEXP ZSEXP, SEXP g_cppSEXP, SEXP h_1SEXP, SEXP h_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type theta_iq(theta_iqSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< double >::type h_1(h_1SEXP);
    Rcpp::traits::input_parameter< double >::type h_2(h_2SEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma2_cpp(alpha, beta, beta_kq0, omega, theta_iq, y, data_index, B, Z, g_cpp, h_1, h_2));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha_Q1_cpp
arma::vec update_alpha_Q1_cpp(const arma::mat& beta, const double& sigma2, const arma::mat& data_index, const arma::mat& y, const arma::cube& B, const arma::cube& Z, const arma::vec& g, const arma::mat& Z_sum, const arma::mat& V_alpha_inv, const arma::vec& V_alpha_inv_mu_alpha);
RcppExport SEXP _BayTetra_update_alpha_Q1_cpp(SEXP betaSEXP, SEXP sigma2SEXP, SEXP data_indexSEXP, SEXP ySEXP, SEXP BSEXP, SEXP ZSEXP, SEXP gSEXP, SEXP Z_sumSEXP, SEXP V_alpha_invSEXP, SEXP V_alpha_inv_mu_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_sum(Z_sumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V_alpha_inv(V_alpha_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type V_alpha_inv_mu_alpha(V_alpha_inv_mu_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_Q1_cpp(beta, sigma2, data_index, y, B, Z, g, Z_sum, V_alpha_inv, V_alpha_inv_mu_alpha));
    return rcpp_result_gen;
END_RCPP
}
// update_eta_kq_Q1_cpp
arma::vec update_eta_kq_Q1_cpp(const arma::vec& alpha, const arma::mat& beta, const double sigma2, const arma::vec& beta_kq0, const arma::mat& xi, const arma::vec& gamma_kq, const arma::vec& nu_kq, const arma::mat& y, const arma::cube& Z, const arma::cube& B, const arma::vec& g_cpp, const arma::mat& data_index);
RcppExport SEXP _BayTetra_update_eta_kq_Q1_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP beta_kq0SEXP, SEXP xiSEXP, SEXP gamma_kqSEXP, SEXP nu_kqSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP BSEXP, SEXP g_cppSEXP, SEXP data_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_kq(gamma_kqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu_kq(nu_kqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_index(data_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(update_eta_kq_Q1_cpp(alpha, beta, sigma2, beta_kq0, xi, gamma_kq, nu_kq, y, Z, B, g_cpp, data_index));
    return rcpp_result_gen;
END_RCPP
}
// update_xi_kq_Q1_cpp
arma::mat update_xi_kq_Q1_cpp(const arma::vec& alpha, const arma::mat& beta, const double sigma2, const arma::vec& beta_kq0, const arma::vec& eta, const arma::mat& m, const arma::vec& g_cpp, const arma::mat& data_index, const arma::mat& y, const arma::cube& Z, const arma::cube& B);
RcppExport SEXP _BayTetra_update_xi_kq_Q1_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP beta_kq0SEXP, SEXP etaSEXP, SEXP mSEXP, SEXP g_cppSEXP, SEXP data_indexSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_kq0(beta_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(update_xi_kq_Q1_cpp(alpha, beta, sigma2, beta_kq0, eta, m, g_cpp, data_index, y, Z, B));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_kq0_Q1_cpp
arma::vec update_beta_kq0_Q1_cpp(const arma::vec& alpha, const arma::mat& beta, const double sigma2, const arma::vec& gamma_kq0, const arma::vec& nu_kq0, const arma::mat& y, const arma::cube& Z, const arma::cube& B, const arma::vec& g_cpp, const arma::mat& data_index);
RcppExport SEXP _BayTetra_update_beta_kq0_Q1_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP gamma_kq0SEXP, SEXP nu_kq0SEXP, SEXP ySEXP, SEXP ZSEXP, SEXP BSEXP, SEXP g_cppSEXP, SEXP data_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_kq0(gamma_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu_kq0(nu_kq0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g_cpp(g_cppSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_index(data_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_kq0_Q1_cpp(alpha, beta, sigma2, gamma_kq0, nu_kq0, y, Z, B, g_cpp, data_index));
    return rcpp_result_gen;
END_RCPP
}
// update_sigma2_Q1_cpp
double update_sigma2_Q1_cpp(arma::vec& alpha, arma::mat& beta, const arma::mat& y, const arma::cube& Z, const arma::cube& B, const arma::mat& data_index, const arma::vec& g, double h_1, double h_2);
RcppExport SEXP _BayTetra_update_sigma2_Q1_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP BSEXP, SEXP data_indexSEXP, SEXP gSEXP, SEXP h_1SEXP, SEXP h_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_index(data_indexSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type h_1(h_1SEXP);
    Rcpp::traits::input_parameter< double >::type h_2(h_2SEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma2_Q1_cpp(alpha, beta, y, Z, B, data_index, g, h_1, h_2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayTetra_dmvn_rcpp", (DL_FUNC) &_BayTetra_dmvn_rcpp, 4},
    {"_BayTetra_Generate_t_cpp", (DL_FUNC) &_BayTetra_Generate_t_cpp, 7},
    {"_BayTetra_rmvn_rcpp", (DL_FUNC) &_BayTetra_rmvn_rcpp, 3},
    {"_BayTetra_rinvgamma_rcpp", (DL_FUNC) &_BayTetra_rinvgamma_rcpp, 2},
    {"_BayTetra_dinv_gamma_rcpp", (DL_FUNC) &_BayTetra_dinv_gamma_rcpp, 4},
    {"_BayTetra_update_alpha_cpp", (DL_FUNC) &_BayTetra_update_alpha_cpp, 13},
    {"_BayTetra_update_beta_kq0_cpp", (DL_FUNC) &_BayTetra_update_beta_kq0_cpp, 11},
    {"_BayTetra_update_beta_kq_cpp", (DL_FUNC) &_BayTetra_update_beta_kq_cpp, 13},
    {"_BayTetra_logpost_omega_cpp", (DL_FUNC) &_BayTetra_logpost_omega_cpp, 16},
    {"_BayTetra_update_omega_cpp", (DL_FUNC) &_BayTetra_update_omega_cpp, 13},
    {"_BayTetra_logpost_Sigma_omega_cpp", (DL_FUNC) &_BayTetra_logpost_Sigma_omega_cpp, 2},
    {"_BayTetra_update_Sigma_omega_cpp", (DL_FUNC) &_BayTetra_update_Sigma_omega_cpp, 3},
    {"_BayTetra_update_theta_iq_cpp", (DL_FUNC) &_BayTetra_update_theta_iq_cpp, 14},
    {"_BayTetra_update_tau_q_cpp", (DL_FUNC) &_BayTetra_update_tau_q_cpp, 6},
    {"_BayTetra_logpost_lambda_normpart_cpp", (DL_FUNC) &_BayTetra_logpost_lambda_normpart_cpp, 6},
    {"_BayTetra_update_lambda_q_cpp", (DL_FUNC) &_BayTetra_update_lambda_q_cpp, 8},
    {"_BayTetra_update_lambda_q_cpp_wth_accept", (DL_FUNC) &_BayTetra_update_lambda_q_cpp_wth_accept, 8},
    {"_BayTetra_update_sigma2_cpp", (DL_FUNC) &_BayTetra_update_sigma2_cpp, 12},
    {"_BayTetra_update_alpha_Q1_cpp", (DL_FUNC) &_BayTetra_update_alpha_Q1_cpp, 10},
    {"_BayTetra_update_eta_kq_Q1_cpp", (DL_FUNC) &_BayTetra_update_eta_kq_Q1_cpp, 12},
    {"_BayTetra_update_xi_kq_Q1_cpp", (DL_FUNC) &_BayTetra_update_xi_kq_Q1_cpp, 11},
    {"_BayTetra_update_beta_kq0_Q1_cpp", (DL_FUNC) &_BayTetra_update_beta_kq0_Q1_cpp, 10},
    {"_BayTetra_update_sigma2_Q1_cpp", (DL_FUNC) &_BayTetra_update_sigma2_Q1_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayTetra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
